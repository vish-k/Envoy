static_resources:
  listeners:
  - name: ingress_listener
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8443
    traffic_direction: INBOUND
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          codec_type: auto
          stat_prefix: my_https_ingress_stat
          server_name: "my-https-api"
          server_header_transformation: OVERWRITE
          access_log:
            - name: envoy.access_loggers.file
              filter:
                status_code_filter: # only log 5xx errors in access log
                  comparison: 
                    op: GE
                    value:
                      default_value: 500
                      runtime_key: " "
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                path: "/logs/ingress.log"
                format: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\"
                  %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION%
                  %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(USER-AGENT)%\"
                  \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\"\n"       
          request_timeout: 300s
          route_config:
            name: my_https_ingress_route
            virtual_hosts:
            - name: my_https_ingress_vh
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/favicon.ico"
                direct_response: 
                  status: 204
                  body:
                    inline_string: "No favicon available"
              - match:
                  prefix: "/"
                route:
                  priority: high # envoy treats the connection pool with high priority
                  cluster: my_https_ingress_cluster
                  #retry_policy:
                  #  retry_on: reset
                  #  num_retries: 1
                decorator:
                  operation: my_https_api
          http_filters:
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              suppress_envoy_headers: true
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.api.v2.auth.DownstreamTlsContext
          common_tls_context:
            alpn_protocols: [ "h2,http/1.1" ]
            tls_certificates:
              - certificate_chain: { filename: "/data/cert.pem" }
                private_key: { filename: "/data/key.pem" }
            validation_context:
              trusted_ca: { filename: "/data/cert.pem" }
  clusters:
  - name: my_https_ingress_cluster
    connect_timeout: 3s
    type: static
    load_assignment:
      cluster_name: my_https_ingress_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              pipe:
                path: "/var/tmp/https.sock"
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.api.v2.auth.UpstreamTlsContext
        common_tls_context:
          validation_context:
            trusted_ca: { filename: "/data/cert.pem" }
# disable admin listener. in cloudnative app you can't really admin individual container
# admin:
#   access_log_path: "/logs/envoyadminaccess.log"
#   address:
#     socket_address:
#       address: 0.0.0.0
#       port_value: 8001
# cluster_manager:
#   outlier_detection:
#     event_log_path: "/logs/outlier-ejection.log"
